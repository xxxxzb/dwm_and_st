!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
${OBJ}	Makefile	/^${OBJ}: config.h config.mk$/;"	t
-102,6 +103,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -102,6 +103,7 @@ static Button buttons[] = {$/;"	h	modifiedFile:a/config.def.h
-103,6 +103,8	patches/dwm-hide-and-restore.diff	/^@@ -103,6 +103,8 @@ static Key keys[] = {$/;"	h	modifiedFile:a/config.def.h
-1052,6 +1055,14	patches/dwm-scratchpad-6.2.diff	/^@@ -1052,6 +1055,14 @@ manage(Window w, XWindowAttributes *wa)$/;"	h	modifiedFile:a/dwm.c
-1067,12 +1136,14	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -1067,12 +1136,14 @@ manage(Window w, XWindowAttributes *wa)$/;"	h	modifiedFile:a/dwm.c
-112,6 +112,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -112,6 +112,7 @@ typedef struct {$/;"	h	modifiedFile:a/dwm.c
-117,6 +118,8	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -117,6 +118,8 @@ struct Monitor {$/;"	h	modifiedFile:a/dwm.c
-119,6 +119,10	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -119,6 +119,10 @@ struct Monitor {$/;"	h	modifiedFile:a/dwm.c
-1195,7 +1266,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -1195,7 +1266,7 @@ movemouse(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-12,11 +12,18	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -12,11 +12,18 @@ static const char col_gray2[]       = "#444444";$/;"	h	modifiedFile:a/config.def.h
-12,6 +12,7	patches/dwm-r1522-viewontag.diff	/^@@ -12,6 +12,7 @@$/;"	h	modifiedFile:a/config.h
-1282,6 +1282,13	patches/dwm-noborder-6.2.diff	/^@@ -1282,6 +1282,13 @@ resizeclient(Client *c, int x, int y, int w, int h)$/;"	h	modifiedFile:a/dwm.c
-131,6 +132,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -131,6 +132,7 @@ struct Monitor {$/;"	h	modifiedFile:a/dwm.c
-1386,6 +1387,12	patches/dwm-autostart-20161205-bb3bd6f.diff	/^@@ -1386,6 +1387,12 @@ run(void)$/;"	h	modifiedFile:a/dwm.c
-1390,6 +1415,38	patches/dwm-rotatestack-20161021-ab9571b.diff	/^@@ -1390,6 +1415,38 @@ restack(Monitor *m)$/;"	h	modifiedFile:a/dwm.c
-1497,6 +1498,19	patches/dwm-fullscreen-6.2.diff	/^@@ -1497,6 +1498,19 @@ setfullscreen(Client *c, int fullscreen)$/;"	h	modifiedFile:a/dwm.c
-1498,6 +1517,111	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -1498,6 +1517,111 @@ setfullscreen(Client *c, int fullscreen)$/;"	h	modifiedFile:a/dwm.c
-1503,9 +1529,9	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -1503,9 +1529,9 @@ void$/;"	h	modifiedFile:a/dwm.c
-1524,7 +1550,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -1524,7 +1550,7 @@ setmfact(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-1541,7 +1549,8	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -1541,7 +1549,8 @@ setup(void)$/;"	h	modifiedFile:a/dwm.c
-1569,7 +1578,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -1569,7 +1578,7 @@ setup(void)$/;"	h	modifiedFile:a/dwm.c
-16,6 +16,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -16,6 +16,7 @@ static const char *colors[][3]      = {$/;"	h	modifiedFile:a/config.def.h
-1610,6 +1681,17	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -1610,6 +1681,17 @@ seturgent(Client *c, int urg)$/;"	h	modifiedFile:a/dwm.c
-1613,6 +1613,8	patches/dwm-r1522-viewontag.diff	/^@@ -1613,6 +1613,8 @@$/;"	h	modifiedFile:a/dwm.c
-165,6 +165,8	patches/dwm-rotatestack-20161021-ab9571b.diff	/^@@ -165,6 +165,8 @@ static void detachstack(Client *c);$/;"	h	modifiedFile:a/dwm.c
-1661,6 +1672,7	patches/dwm-scratchpad-6.2.diff	/^@@ -1661,6 +1672,7 @@ spawn(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-1673,26 +1797,32	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -1673,26 +1797,32 @@ tagmon(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-1701,7 +1727,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -1701,7 +1727,7 @@ tile(Monitor *m)$/;"	h	modifiedFile:a/dwm.c
-174,6 +177,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -174,6 +177,7 @@ static long getstate(Window w);$/;"	h	modifiedFile:a/dwm.c
-1740,9 +1766,33	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -1740,9 +1766,33 @@ void$/;"	h	modifiedFile:a/dwm.c
-1746,6 +1828,20	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -1746,6 +1828,20 @@ toggleview(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-1748,6 +1760,28	patches/dwm-scratchpad-6.2.diff	/^@@ -1748,6 +1760,28 @@ togglefloating(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-180,21 +183,22	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -180,21 +183,22 @@ drw_fontset_free(Fnt *font)$/;"	h	modifiedFile:a/drw.c
-1804,16 +1813,18	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -1804,16 +1813,18 @@ updatebars(void)$/;"	h	modifiedFile:a/dwm.c
-194,6 +194,7	patches/dwm-autostart-20161205-bb3bd6f.diff	/^@@ -194,6 +194,7 @@ static void resizeclient(Client *c, int x, int y, int w, int h);$/;"	h	modifiedFile:a/dwm.c
-194,6 +196,7	patches/dwm-rotatestack-20161021-ab9571b.diff	/^@@ -194,6 +196,7 @@ static void resize(Client *c, int x, int y, int w, int h, int interact);$/;"	h	modifiedFile:a/dwm.c
-199,6 +199,7	patches/dwm-fullscreen-6.2.diff	/^@@ -199,6 +199,7 @@ static void sendmon(Client *c, Monitor *m);$/;"	h	modifiedFile:a/dwm.c
-199,6 +203,16	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -199,6 +203,16 @@ static void sendmon(Client *c, Monitor *m);$/;"	h	modifiedFile:a/dwm.c
-1993,6 +1999,31	patches/dwm-hide-and-restore.diff	/^@@ -1993,6 +1999,31 @@ toggleview(const Arg *arg)$/;"	h	modifiedFile:a/dwm.c
-20,6 +20,9	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -20,6 +20,9 @@ typedef struct {$/;"	h	modifiedFile:a/drw.h
-203,6 +207,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -203,6 +207,7 @@ static void setlayout(const Arg *arg);$/;"	h	modifiedFile:a/dwm.c
-2036,11 +2086,37	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -2036,11 +2086,37 @@ updatewmhints(Client *c)$/;"	h	modifiedFile:a/dwm.c
-204,7 +208,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -204,7 +208,7 @@ drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	h	modifiedFile:a/drw.c
-2110,6 +2121,43	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -2110,6 +2121,43 @@ xerrorstart(Display *dpy, XErrorEvent *ee)$/;"	h	modifiedFile:a/dwm.c
-213,6 +213,7	patches/dwm-scratchpad-6.2.diff	/^@@ -213,6 +213,7 @@ static void tagmon(const Arg *arg);$/;"	h	modifiedFile:a/dwm.c
-213,6 +218,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -213,6 +218,7 @@ static void togglebar(const Arg *arg);$/;"	h	modifiedFile:a/dwm.c
-2145,6 +2152,7	patches/dwm-autostart-20161205-bb3bd6f.diff	/^@@ -2145,6 +2152,7 @@ main(int argc, char *argv[])$/;"	h	modifiedFile:a/dwm.c
-22,7 +22,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -22,7 +22,7 @@ FREETYPEINC = \/usr\/include\/freetype2$/;"	h	modifiedFile:a/config.mk
-232,6 +232,8	patches/dwm-hide-and-restore.diff	/^@@ -232,6 +232,8 @@ static void togglefloating(const Arg *arg);$/;"	h	modifiedFile:a/dwm.c
-232,6 +234,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -232,6 +234,7 @@ static Monitor *wintomon(Window w);$/;"	h	modifiedFile:a/dwm.c
-240,6 +254,7	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -240,6 +254,7 @@ static char stext[256];$/;"	h	modifiedFile:a/dwm.c
-260,9 +264,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -260,9 +264,7 @@ drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned in/;"	h	modifiedFile:a/drw.c
-268,6 +271,11	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -268,6 +271,11 @@ static Drw *drw;$/;"	h	modifiedFile:a/dwm.c
-27,7 +30,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -27,7 +30,7 @@ typedef struct {$/;"	h	modifiedFile:a/drw.h
-272,6 +274,15	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -272,6 +274,15 @@ static Window root, wmcheckwin;$/;"	h	modifiedFile:a/dwm.c
-273,6 +274,8	patches/dwm-scratchpad-6.2.diff	/^@@ -273,6 +274,8 @@ static Window root, wmcheckwin;$/;"	h	modifiedFile:a/dwm.c
-294,6 +296,10	patches/dwm-hide-and-restore.diff	/^@@ -294,6 +296,10 @@ static Visual *visual;$/;"	h	modifiedFile:a/dwm.c
-3,6 +3,11	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -3,6 +3,11 @@$/;"	h	modifiedFile:a/config.def.h
-38,8 +41,8	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -38,8 +41,8 @@ unsigned int drw_fontset_getwidth(Drw *drw, const char *text);$/;"	h	modifiedFile:a/drw.h
-416,7 +416,7	patches/dwm-hide_vacant_tags-6.2.diff	/^@@ -416,7 +416,7 @@ attachstack(Client *c)$/;"	h	modifiedFile:a/dwm.c
-431,9 +431,14	patches/dwm-hide_vacant_tags-6.2.diff	/^@@ -431,9 +431,14 @@ buttonpress(XEvent *e)$/;"	h	modifiedFile:a/dwm.c
-439,10 +445,25	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -439,10 +445,25 @@ buttonpress(XEvent *e)$/;"	h	modifiedFile:a/dwm.c
-452,7 +473,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -452,7 +473,7 @@ buttonpress(XEvent *e)$/;"	h	modifiedFile:a/dwm.c
-50,6 +50,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -50,6 +50,7 @@$/;"	h	modifiedFile:a/dwm.c
-57,6 +57,8	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -57,6 +57,8 @@$/;"	h	modifiedFile:a/dwm.c
-58,11 +58,14	patches/dwm-scratchpad-6.2.diff	/^@@ -58,11 +58,14 @@ static const Layout layouts[] = {$/;"	h	modifiedFile:a/config.def.h
-59,7 +60,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -59,7 +60,7 @@$/;"	h	modifiedFile:a/dwm.c
-61,7 +61,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -61,7 +61,7 @@ utf8decode(const char *c, long *u, size_t clen)$/;"	h	modifiedFile:a/drw.c
-632,6 +643,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -632,6 +643,7 @@ Monitor *$/;"	h	modifiedFile:a/dwm.c
-638,6 +653,10	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -638,6 +653,10 @@ createmon(void)$/;"	h	modifiedFile:a/dwm.c
-64,6 +64,8	patches/dwm-rotatestack-20161021-ab9571b.diff	/^@@ -64,6 +64,8 @@ static Key keys[] = {$/;"	h	modifiedFile:a/config.def.h
-642,6 +654,20	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -642,6 +654,20 @@ createmon(void)$/;"	h	modifiedFile:a/dwm.c
-695,7 +716,7	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -695,7 +716,7 @@ dirtomon(int dir)$/;"	h	modifiedFile:a/dwm.c
-70,6 +75,22	patches/dwm-vanitygaps-20190508-6.2.diff	/^@@ -70,6 +75,22 @@ static Key keys[] = {$/;"	h	modifiedFile:a/config.def.h
-70,8 +70,11	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -70,8 +70,11 @@ drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned in/;"	h	modifiedFile:a/drw.c
-709,19 +714,19	patches/dwm-hide_vacant_tags-6.2.diff	/^@@ -709,19 +714,19 @@ drawbar(Monitor *m)$/;"	h	modifiedFile:a/dwm.c
-709,6 +730,8	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -709,6 +730,8 @@ drawbar(Monitor *m)$/;"	h	modifiedFile:a/dwm.c
-729,16 +752,37	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -729,16 +752,37 @@ drawbar(Monitor *m)$/;"	h	modifiedFile:a/dwm.c
-76,6 +76,7	patches/dwm-fullscreen-6.2.diff	/^@@ -76,6 +76,7 @@ static Key keys[] = {$/;"	h	modifiedFile:a/config.h
-765,6 +768,28	patches/dwm-rotatestack-20161021-ab9571b.diff	/^@@ -765,6 +768,28 @@ drawbars(void)$/;"	h	modifiedFile:a/dwm.c
-783,8 +827,8	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -783,8 +827,8 @@ expose(XEvent *e)$/;"	h	modifiedFile:a/dwm.c
-87,7 +90,7	patches/dwm-alpha-20180613-b69c870.diff	/^@@ -87,7 +90,7 @@ drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	h	modifiedFile:a/drw.c
-963,6 +1007,31	patches/dwm-awesomebar-20191003-80e2a76.diff	/^@@ -963,6 +1007,31 @@ grabkeys(void)$/;"	h	modifiedFile:a/dwm.c
-968,7 +994,7	patches/dwm-pertag-20170513-ceac8c9.diff	/^@@ -968,7 +994,7 @@ grabkeys(void)$/;"	h	modifiedFile:a/dwm.c
.c.o	Makefile	/^.c.o:$/;"	t
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon0f53a99e060a	file:
BETWEEN	util.h	/^#define BETWEEN(/;"	d
BUGS	dwm.1	/^.SH BUGS$/;"	s	title:DWM
BUTTONMASK	dwm.c	/^#define BUTTONMASK /;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon0f53a99e0708	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -O2 ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	/^#define CLEANMASK(/;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\\"${VERSION}\\" ${XINE/;"	m
CUSTOMIZATION	dwm.1	/^.SH CUSTOMIZATION$/;"	s	title:DWM
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon0f53a99e0503	file:
ClkLast	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon0f53a99e0503	file:
ClkLtSymbol	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
ClkRootWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon0f53a99e0503	file:
ClkStatusText	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
ClkTagBar	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
ClkWinTitle	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
Clr	drw.h	/^typedef XftColor Clr;$/;"	t	typeref:typename:XftColor
ColBg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColBorder	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColFg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon0f5116480108
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
DESCRIPTION	dwm.1	/^.SH DESCRIPTION$/;"	s	title:DWM
DWM	dwm.1	/^.TH DWM 1 dwm\\-VERSION$/;"	t
David's build of dwm	README.md	/^David's build of dwm$/;"	c
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon0f5116480308
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
HEIGHT	dwm.c	/^#define HEIGHT(/;"	d	file:
HIDDEN	dwm.c	/^#define HIDDEN(/;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dwm.c	/^#define INTERSECT(/;"	d	file:
ISSUES	dwm.1	/^.SH ISSUES$/;"	s	title:DWM
ISVISIBLE	dwm.c	/^#define ISVISIBLE(/;"	d	file:
Installation	README.md	/^Installation$/;"	s
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon0f53a99e0808	file:
LDFLAGS	config.mk	/^LDFLAGS  = ${LIBS}$/;"	m
LENGTH	dwm.c	/^#define LENGTH(/;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrender$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon0f53a99e0908	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	/^#define MAX(/;"	d
MIN	util.h	/^#define MIN(/;"	d
MODKEY	config.h	/^#define MODKEY /;"	d
MOUSEMASK	dwm.c	/^#define MOUSEMASK /;"	d	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NAME	dwm.1	/^.SH NAME$/;"	s	title:DWM
NetActiveWindow	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon0f53a99e0303	file:
NetClientList	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon0f53a99e0303	file:
NetLast	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon0f53a99e0303	file:
NetSupported	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMCheck	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMFullscreen	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMName	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMState	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowType	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowTypeDialog	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon0f53a99e0303	file:
NumTags	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OPAQUE	dwm.c	/^#define OPAQUE /;"	d	file:
OPTIONS	dwm.1	/^.SH OPTIONS$/;"	s	title:DWM
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Patches applied	README.md	/^Patches applied$/;"	s
Pertag	dwm.c	/^struct Pertag {$/;"	s	file:
Pertag	dwm.c	/^typedef struct Pertag Pertag;$/;"	t	typeref:struct:Pertag	file:
Requirements	README.md	/^Requirements$/;"	s
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon0f53a99e0a08	file:
Running dwm	README.md	/^Running dwm$/;"	s
SEE	dwm.1	/^.SH SEE ALSO$/;"	s	title:DWM
SHCMD	config.h	/^#define SHCMD(/;"	d
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
SYNOPSIS	dwm.1	/^.SH SYNOPSIS$/;"	s	title:DWM
SchemeHid	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid }; \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
SchemeNorm	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid }; \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
SchemeSel	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid }; \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
TAGKEYS	config.h	/^#define TAGKEYS(/;"	d
TAGMASK	dwm.c	/^#define TAGMASK /;"	d	file:
TEXTW	dwm.c	/^#define TEXTW(/;"	d	file:
USAGE	dwm.1	/^.SH USAGE$/;"	s	title:DWM
UTF_INVALID	drw.c	/^#define UTF_INVALID /;"	d	file:
UTF_SIZ	drw.c	/^#define UTF_SIZ /;"	d	file:
VERSION	config.mk	/^VERSION = 6.2$/;"	m
WIDTH	dwm.c	/^#define WIDTH(/;"	d	file:
WMDelete	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon0f53a99e0403	file:
WMLast	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon0f53a99e0403	file:
WMProtocols	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon0f53a99e0403	file:
WMState	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon0f53a99e0403	file:
WMTakeFocus	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon0f53a99e0403	file:
X11INC	config.mk	/^X11INC = \/usr\/include\/X11$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/lib\/X11$/;"	m
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
__anon0f5116480108	drw.h	/^typedef struct {$/;"	s
__anon0f5116480203	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	g
__anon0f5116480308	drw.h	/^typedef struct {$/;"	s
__anon0f53a99e0103	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	g	file:
__anon0f53a99e0203	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid }; \/* color schemes *\/$/;"	g	file:
__anon0f53a99e0303	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	g	file:
__anon0f53a99e0403	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	g	file:
__anon0f53a99e0503	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	g	file:
__anon0f53a99e060a	dwm.c	/^typedef union {$/;"	u	file:
__anon0f53a99e0708	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0808	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0908	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0a08	dwm.c	/^typedef struct {$/;"	s	file:
a/config.def.h	patches/dwm-alpha-20180613-b69c870.diff	/^--- a\/config.def.h$/;"	m
a/config.def.h	patches/dwm-awesomebar-20191003-80e2a76.diff	/^--- a\/config.def.h$/;"	m
a/config.def.h	patches/dwm-hide-and-restore.diff	/^--- a\/config.def.h$/;"	m
a/config.def.h	patches/dwm-rotatestack-20161021-ab9571b.diff	/^--- a\/config.def.h$/;"	m
a/config.def.h	patches/dwm-scratchpad-6.2.diff	/^--- a\/config.def.h	2019-06-06 21:23:27.006661784 +0200$/;"	m
a/config.def.h	patches/dwm-vanitygaps-20190508-6.2.diff	/^--- a\/config.def.h$/;"	m
a/config.h	patches/dwm-fullscreen-6.2.diff	/^--- a\/config.h$/;"	m
a/config.h	patches/dwm-r1522-viewontag.diff	/^--- a\/config.h	Sun Jul 25 09:58:25 2010 +0100$/;"	m
a/config.mk	patches/dwm-alpha-20180613-b69c870.diff	/^--- a\/config.mk$/;"	m
a/drw.c	patches/dwm-alpha-20180613-b69c870.diff	/^--- a\/drw.c$/;"	m
a/drw.h	patches/dwm-alpha-20180613-b69c870.diff	/^--- a\/drw.h$/;"	m
a/dwm.c	patches/dwm-alpha-20180613-b69c870.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-autostart-20161205-bb3bd6f.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-awesomebar-20191003-80e2a76.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-fullscreen-6.2.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-hide-and-restore.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-hide_vacant_tags-6.2.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-noborder-6.2.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-pertag-20170513-ceac8c9.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-r1522-viewontag.diff	/^--- a\/dwm.c	Sun Jul 25 09:58:25 2010 +0100$/;"	m
a/dwm.c	patches/dwm-rotatestack-20161021-ab9571b.diff	/^--- a\/dwm.c$/;"	m
a/dwm.c	patches/dwm-scratchpad-6.2.diff	/^--- a\/dwm.c	2019-06-06 21:23:27.023328450 +0200$/;"	m
a/dwm.c	patches/dwm-vanitygaps-20190508-6.2.diff	/^--- a\/dwm.c$/;"	m
all	Makefile	/^all: options dwm$/;"	t
alphas	config.h	/^static const unsigned int alphas[][3]      = {$/;"	v	typeref:typename:const unsigned int[][3]
applyrules	dwm.c	/^applyrules(Client *c)$/;"	f	typeref:typename:void
applysizehints	dwm.c	/^applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact)$/;"	f	typeref:typename:int
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:const Arg	file:
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:const Arg	file:
arrange	dwm.c	/^	void (*arrange)(Monitor *);$/;"	m	struct:__anon0f53a99e0908	typeref:typename:void (*)(Monitor *)	file:
arrange	dwm.c	/^arrange(Monitor *m)$/;"	f	typeref:typename:void
arrangemon	dwm.c	/^arrangemon(Monitor *m)$/;"	f	typeref:typename:void
attach	dwm.c	/^attach(Client *c)$/;"	f	typeref:typename:void
attachstack	dwm.c	/^attachstack(Client *c)$/;"	f	typeref:typename:void
baralpha	config.h	/^static const unsigned int baralpha = 0xd0;$/;"	v	typeref:typename:const unsigned int
barwin	dwm.c	/^	Window barwin;$/;"	m	struct:Monitor	typeref:typename:Window	file:
baseh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
basew	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
bh	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
blw	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
borderalpha	config.h	/^static const unsigned int borderalpha = OPAQUE;$/;"	v	typeref:typename:const unsigned int
borderpx	config.h	/^static const unsigned int borderpx  = 2;        \/* border pixel of windows *\/$/;"	v	typeref:typename:const unsigned int
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	typeref:typename:const char[]	file:
bt	dwm.c	/^	int bt;               \/* number of tasks *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
btw	dwm.c	/^	int btw;              \/* width of tasks portion of bar *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
button	dwm.c	/^	unsigned int button;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
buttonpress	dwm.c	/^buttonpress(XEvent *e)$/;"	f	typeref:typename:void
buttons	config.h	/^static Button buttons[] = {$/;"	v	typeref:typename:Button[]
bw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
by	dwm.c	/^	int by;               \/* bar geometry *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
checkotherwm	dwm.c	/^checkotherwm(void)$/;"	f	typeref:typename:void
chromiumcmd	config.h	/^static const char *chromiumcmd[]  = { "chromium", NULL };$/;"	v	typeref:typename:const char * []
class	dwm.c	/^	const char *class;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
clean	Makefile	/^clean:$/;"	t
cleanup	dwm.c	/^cleanup(void)$/;"	f	typeref:typename:void
cleanupmon	dwm.c	/^cleanupmon(Monitor *mon)$/;"	f	typeref:typename:void
click	dwm.c	/^	unsigned int click;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
clientmessage	dwm.c	/^clientmessage(XEvent *e)$/;"	f	typeref:typename:void
clients	dwm.c	/^	Client *clients;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
cmap	drw.h	/^	Colormap cmap;$/;"	m	struct:__anon0f5116480308	typeref:typename:Colormap
cmap	dwm.c	/^static Colormap cmap;$/;"	v	typeref:typename:Colormap	file:
col_border	config.h	/^static const char col_border[]        = "#42A5F5";$/;"	v	typeref:typename:const char[]
col_cyan	config.h	/^static const char col_cyan[]        = "#37474F";$/;"	v	typeref:typename:const char[]
col_gray1	config.h	/^static const char col_gray1[]       = "#222222";$/;"	v	typeref:typename:const char[]
col_gray2	config.h	/^static const char col_gray2[]       = "#444444";$/;"	v	typeref:typename:const char[]
col_gray3	config.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v	typeref:typename:const char[]
col_gray4	config.h	/^static const char col_gray4[]       = "#ffffff";$/;"	v	typeref:typename:const char[]
colors	config.h	/^static const char *colors[][3]      = {$/;"	v	typeref:typename:const char * [][3]
config.h	Makefile	/^config.h:$/;"	t
configure	dwm.c	/^configure(Client *c)$/;"	f	typeref:typename:void
configurenotify	dwm.c	/^configurenotify(XEvent *e)$/;"	f	typeref:typename:void
configurerequest	dwm.c	/^configurerequest(XEvent *e)$/;"	f	typeref:typename:void
createmon	dwm.c	/^createmon(void)$/;"	f	typeref:typename:Monitor *
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon0f5116480108	typeref:typename:Cursor
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	typeref:typename:Cur * []	file:
curtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int	file:
depth	drw.h	/^	unsigned int depth;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
depth	dwm.c	/^static int depth;$/;"	v	typeref:typename:int	file:
destroynotify	dwm.c	/^destroynotify(XEvent *e)$/;"	f	typeref:typename:void
detach	dwm.c	/^detach(Client *c)$/;"	f	typeref:typename:void
detachstack	dwm.c	/^detachstack(Client *c)$/;"	f	typeref:typename:void
die	util.c	/^die(const char *fmt, ...) {$/;"	f	typeref:typename:void
dirtomon	dwm.c	/^dirtomon(int dir)$/;"	f	typeref:typename:Monitor *
dist	Makefile	/^dist: clean$/;"	t
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray/;"	v	typeref:typename:const char * []
dmenufont	config.h	/^static const char dmenufont[]       = "DejaVuSansMono NF:size=14";$/;"	v	typeref:typename:const char[]
dmenumon	config.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v	typeref:typename:char[2]
downvol	config.h	/^static const char *downvol[] = { "\/home\/xzb\/scripts\/vol-down.sh",  NULL };$/;"	v	typeref:typename:const char * []
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt	typeref:typename:Display *
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon0f5116480308	typeref:typename:Display *
dpy	dwm.c	/^static Display *dpy;$/;"	v	typeref:typename:Display *	file:
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon0f5116480308	typeref:typename:Drawable
drawbar	dwm.c	/^drawbar(Monitor *m)$/;"	f	typeref:typename:void
drawbars	dwm.c	/^drawbars(void)$/;"	f	typeref:typename:void
drw	dwm.c	/^static Drw *drw;$/;"	v	typeref:typename:Drw *	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, Clr *dest, const char *clrname, unsigned int alpha)$/;"	f	typeref:typename:void
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h, Visual *visual/;"	f	typeref:typename:Drw *
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f	typeref:typename:Cur *
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f	typeref:typename:void
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h/;"	f	typeref:typename:void
drw_fontset_create	drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f	typeref:typename:Fnt *
drw_fontset_free	drw.c	/^drw_fontset_free(Fnt *font)$/;"	f	typeref:typename:void
drw_fontset_getwidth	drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f	typeref:typename:unsigned int
drw_free	drw.c	/^drw_free(Drw *drw)$/;"	f	typeref:typename:void
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f	typeref:typename:void
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f	typeref:typename:void
drw_scm_create	drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], const unsigned int alphas[], size_t clrcount)$/;"	f	typeref:typename:Clr *
drw_setfontset	drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f	typeref:typename:void
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, Clr *scm)$/;"	f	typeref:typename:void
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char */;"	f	typeref:typename:int
dwm	Makefile	/^dwm: ${OBJ}$/;"	t
ecalloc	util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
enablegaps	dwm.c	/^static int enablegaps = 1;   \/* enables gaps, used by togglegaps *\/$/;"	v	typeref:typename:int	file:
enqueue	dwm.c	/^enqueue(Client *c)$/;"	f	typeref:typename:void
enqueuestack	dwm.c	/^enqueuestack(Client *c)$/;"	f	typeref:typename:void
enternotify	dwm.c	/^enternotify(XEvent *e)$/;"	f	typeref:typename:void
expose	dwm.c	/^expose(XEvent *e)$/;"	f	typeref:typename:void
f	dwm.c	/^	float f;$/;"	m	union:__anon0f53a99e060a	typeref:typename:float	file:
firefoxcmd	config.h	/^static const char *firefoxcmd[]  = { "firefox", NULL };$/;"	v	typeref:typename:const char * []
focus	dwm.c	/^focus(Client *c)$/;"	f	typeref:typename:void
focusin	dwm.c	/^focusin(XEvent *e)$/;"	f	typeref:typename:void
focusmon	dwm.c	/^focusmon(const Arg *arg)$/;"	f	typeref:typename:void
focusstack	dwm.c	/^focusstack(const Arg *arg)$/;"	f	typeref:typename:void
fonts	config.h	/^static const char *fonts[]          = { "DejaVuSansMono NF:size=14" };$/;"	v	typeref:typename:const char * []
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon0f5116480308	typeref:typename:Fnt *
fullscreen	dwm.c	/^fullscreen(const Arg *arg)$/;"	f	typeref:typename:void
func	dwm.c	/^	void (*func)(const Arg *);$/;"	m	struct:__anon0f53a99e0808	typeref:typename:void (*)(const Arg *)	file:
func	dwm.c	/^	void (*func)(const Arg *arg);$/;"	m	struct:__anon0f53a99e0708	typeref:typename:void (*)(const Arg * arg)	file:
gappih	config.h	/^static const unsigned int gappih    = 10;       \/* horiz inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappih	dwm.c	/^	int gappih;           \/* horizontal gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappiv	config.h	/^static const unsigned int gappiv    = 10;       \/* vert inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappiv	dwm.c	/^	int gappiv;           \/* vertical gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappoh	config.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen e/;"	v	typeref:typename:const unsigned int
gappoh	dwm.c	/^	int gappoh;           \/* horizontal outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappov	config.h	/^static const unsigned int gappov    = 10;       \/* vert outer gap between windows and screen ed/;"	v	typeref:typename:const unsigned int
gappov	dwm.c	/^	int gappov;           \/* vertical outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon0f5116480308	typeref:typename:GC
getatomprop	dwm.c	/^getatomprop(Client *c, Atom prop)$/;"	f	typeref:typename:Atom
getrootptr	dwm.c	/^getrootptr(int *x, int *y)$/;"	f	typeref:typename:int
getstate	dwm.c	/^getstate(Window w)$/;"	f	typeref:typename:long
gettextprop	dwm.c	/^gettextprop(Window w, Atom atom, char *text, unsigned int size)$/;"	f	typeref:typename:int
grabbuttons	dwm.c	/^grabbuttons(Client *c, int focused)$/;"	f	typeref:typename:void
grabkeys	dwm.c	/^grabkeys(void)$/;"	f	typeref:typename:void
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt	typeref:typename:unsigned int
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
handler	dwm.c	/^static void (*handler[LASTEvent]) (XEvent *) = {$/;"	v	typeref:typename:void (* [LASTEvent])(XEvent *)	file:
hiddenWinStack	dwm.c	/^static Client* hiddenWinStack[hiddenWinStackMax];$/;"	v	typeref:typename:Client * []	file:
hiddenWinStackMax	dwm.c	/^#define hiddenWinStackMax /;"	d	file:
hiddenWinStackTop	dwm.c	/^static int hiddenWinStackTop = -1;$/;"	v	typeref:typename:int	file:
hide	dwm.c	/^hide(Client *c) {$/;"	f	typeref:typename:void
hidewin	dwm.c	/^void hidewin(const Arg *arg) {$/;"	f	typeref:typename:void
i	dwm.c	/^	int i;$/;"	m	union:__anon0f53a99e060a	typeref:typename:int	file:
inch	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
incnmaster	dwm.c	/^incnmaster(const Arg *arg)$/;"	f	typeref:typename:void
incw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
install	Makefile	/^install: all$/;"	t
instance	dwm.c	/^	const char *instance;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
isfixed	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^	int isfloating;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
isfullscreen	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isuniquegeom	dwm.c	/^isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info)$/;"	f	typeref:typename:int	file:
isurgent	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
keypress	dwm.c	/^keypress(XEvent *e)$/;"	f	typeref:typename:void
keys	config.h	/^static Key keys[] = {$/;"	v	typeref:typename:Key[]
keysym	dwm.c	/^	KeySym keysym;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:KeySym	file:
killclient	dwm.c	/^killclient(const Arg *arg)$/;"	f	typeref:typename:void
last_layout	dwm.c	/^Layout *last_layout;$/;"	v	typeref:typename:Layout *
layouts	config.h	/^static const Layout layouts[] = {$/;"	v	typeref:typename:const Layout[]
limitexceeded	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	m	struct:NumTags	typeref:typename:char[]	file:
lrpad	dwm.c	/^static int lrpad;            \/* sum of left and right padding for text *\/$/;"	v	typeref:typename:int	file:
lt	dwm.c	/^	const Layout *lt[2];$/;"	m	struct:Monitor	typeref:typename:const Layout * [2]	file:
ltidxs	dwm.c	/^	const Layout *ltidxs[LENGTH(tags) + 1][2]; \/* matrix of tags and layouts indexes  *\/$/;"	m	struct:Pertag	typeref:typename:const Layout * [][2]	file:
ltsymbol	dwm.c	/^	char ltsymbol[16];$/;"	m	struct:Monitor	typeref:typename:char[16]	file:
main	dwm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	transient.c	/^int main(void) {$/;"	f	typeref:typename:int
manage	dwm.c	/^manage(Window w, XWindowAttributes *wa)$/;"	f	typeref:typename:void
mappingnotify	dwm.c	/^mappingnotify(XEvent *e)$/;"	f	typeref:typename:void
maprequest	dwm.c	/^maprequest(XEvent *e)$/;"	f	typeref:typename:void
mask	dwm.c	/^	unsigned int mask;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
maxa	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
maxh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
maxw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mfact	config.h	/^static const float mfact     = 0.5; \/* factor of master area size [0.05..0.95] *\/$/;"	v	typeref:typename:const float
mfact	dwm.c	/^	float mfact;$/;"	m	struct:Monitor	typeref:typename:float	file:
mfacts	dwm.c	/^	float mfacts[LENGTH(tags) + 1]; \/* mfacts per tag *\/$/;"	m	struct:Pertag	typeref:typename:float[]	file:
mh	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mina	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
minh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
minw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mod	dwm.c	/^	unsigned int mod;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:unsigned int	file:
mon	dwm.c	/^	Monitor *mon;$/;"	m	struct:Client	typeref:typename:Monitor *	file:
monitor	dwm.c	/^	int monitor;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
monocle	dwm.c	/^monocle(Monitor *m)$/;"	f	typeref:typename:void
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor *	file:
motionnotify	dwm.c	/^motionnotify(XEvent *e)$/;"	f	typeref:typename:void
movemouse	dwm.c	/^movemouse(const Arg *arg)$/;"	f	typeref:typename:void
mutevol	config.h	/^static const char *mutevol[] = { "\/home\/xzb\/scripts\/vol-toggle.sh",  NULL };$/;"	v	typeref:typename:const char * []
mw	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mx	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
my	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
name	dwm.c	/^	char name[256];$/;"	m	struct:Client	typeref:typename:char[256]	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[][]	file:
neverfocus	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt *
next	dwm.c	/^	Client *next;$/;"	m	struct:Client	typeref:typename:Client *	file:
next	dwm.c	/^	Monitor *next;$/;"	m	struct:Monitor	typeref:typename:Monitor *	file:
nexttiled	dwm.c	/^nexttiled(Client *c)$/;"	f	typeref:typename:Client *
nmaster	config.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v	typeref:typename:const int
nmaster	dwm.c	/^	int nmaster;$/;"	m	struct:Monitor	typeref:typename:int	file:
nmasters	dwm.c	/^	int nmasters[LENGTH(tags) + 1]; \/* number of windows in master area *\/$/;"	m	struct:Pertag	typeref:typename:int[]	file:
num	dwm.c	/^	int num;$/;"	m	struct:Monitor	typeref:typename:int	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	typeref:typename:unsigned int	file:
oldbw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
oldh	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldstate	dwm.c	/^	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
oldw	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldx	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldy	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
options	Makefile	/^options:$/;"	t
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt	typeref:typename:FcPattern *
pertag	dwm.c	/^	Pertag *pertag;$/;"	m	struct:Monitor	typeref:typename:Pertag *	file:
pop	dwm.c	/^pop(Client *c)$/;"	f	typeref:typename:void
prevtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int	file:
propertynotify	dwm.c	/^propertynotify(XEvent *e)$/;"	f	typeref:typename:void
quit	dwm.c	/^quit(const Arg *arg)$/;"	f	typeref:typename:void
recttomon	dwm.c	/^recttomon(int x, int y, int w, int h)$/;"	f	typeref:typename:Monitor *
resize	dwm.c	/^resize(Client *c, int x, int y, int w, int h, int interact)$/;"	f	typeref:typename:void
resizeclient	dwm.c	/^resizeclient(Client *c, int x, int y, int w, int h)$/;"	f	typeref:typename:void
resizehints	config.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v	typeref:typename:const int
resizemouse	dwm.c	/^resizemouse(const Arg *arg)$/;"	f	typeref:typename:void
restack	dwm.c	/^restack(Monitor *m)$/;"	f	typeref:typename:void
restorewin	dwm.c	/^void restorewin(const Arg *arg) {$/;"	f	typeref:typename:void
root	drw.h	/^	Window root;$/;"	m	struct:__anon0f5116480308	typeref:typename:Window
root	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
rotatestack	dwm.c	/^rotatestack(const Arg *arg)$/;"	f	typeref:typename:void
rules	config.h	/^static const Rule rules[] = {$/;"	v	typeref:typename:const Rule[]
run	dwm.c	/^run(void)$/;"	f	typeref:typename:void
runAutostart	dwm.c	/^runAutostart(void) {$/;"	f	typeref:typename:void
running	dwm.c	/^static int running = 1;$/;"	v	typeref:typename:int	file:
scan	dwm.c	/^scan(void)$/;"	f	typeref:typename:void
scheme	drw.h	/^	Clr *scheme;$/;"	m	struct:__anon0f5116480308	typeref:typename:Clr *
scheme	dwm.c	/^static Clr **scheme;$/;"	v	typeref:typename:Clr **	file:
scratchpadcmd	config.h	/^static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "80x24", NULL };$/;"	v	typeref:typename:const char * []
scratchpadname	config.h	/^static const char scratchpadname[] = "scratchpad";$/;"	v	typeref:typename:const char[]
scratchtag	dwm.c	/^static unsigned int scratchtag = 1 << LENGTH(tags);$/;"	v	typeref:typename:unsigned int	file:
screen	drw.h	/^	int screen;$/;"	m	struct:__anon0f5116480308	typeref:typename:int
screen	dwm.c	/^static int screen;$/;"	v	typeref:typename:int	file:
sel	dwm.c	/^	Client *sel;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
sellt	dwm.c	/^	unsigned int sellt;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
sellts	dwm.c	/^	unsigned int sellts[LENGTH(tags) + 1]; \/* selected layouts *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int[]	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor **	file:
seltags	dwm.c	/^	unsigned int seltags;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
sendevent	dwm.c	/^sendevent(Client *c, Atom proto)$/;"	f	typeref:typename:int
sendmon	dwm.c	/^sendmon(Client *c, Monitor *m)$/;"	f	typeref:typename:void
setclientstate	dwm.c	/^setclientstate(Client *c, long state)$/;"	f	typeref:typename:void
setcolemakcmd	config.h	/^static const char *setcolemakcmd[]  = { "\/home\/xzb\/scripts\/setxmodmap-colemak.sh", NULL };$/;"	v	typeref:typename:const char * []
setfocus	dwm.c	/^setfocus(Client *c)$/;"	f	typeref:typename:void
setfullscreen	dwm.c	/^setfullscreen(Client *c, int fullscreen)$/;"	f	typeref:typename:void
setlayout	dwm.c	/^setlayout(const Arg *arg)$/;"	f	typeref:typename:void
setmfact	dwm.c	/^setmfact(const Arg *arg)$/;"	f	typeref:typename:void
setqwertycmd	config.h	/^static const char *setqwertycmd[]  = { "\/home\/xzb\/scripts\/setxmodmap-qwerty.sh", NULL };$/;"	v	typeref:typename:const char * []
setup	dwm.c	/^setup(void)$/;"	f	typeref:typename:void
seturgent	dwm.c	/^seturgent(Client *c, int urg)$/;"	f	typeref:typename:void
sh	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
show	dwm.c	/^show(Client *c)$/;"	f	typeref:typename:void
showbar	config.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v	typeref:typename:const int
showbar	dwm.c	/^	int showbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
showbars	dwm.c	/^	int showbars[LENGTH(tags) + 1]; \/* display bar for the current tag *\/$/;"	m	struct:Pertag	typeref:typename:int[]	file:
showhide	dwm.c	/^showhide(Client *c)$/;"	f	typeref:typename:void
sigchld	dwm.c	/^sigchld(int unused)$/;"	f	typeref:typename:void
sktogglecmd	config.h	/^static const char *sktogglecmd[]  = { "\/home\/xzb\/scripts\/sck-tog.sh", NULL };$/;"	v	typeref:typename:const char * []
smartgaps	config.h	/^static const int smartgaps          = 1;        \/* 1 means no outer gap when there is only one /;"	v	typeref:typename:const int
snap	config.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v	typeref:typename:const unsigned int
snext	dwm.c	/^	Client *snext;$/;"	m	struct:Client	typeref:typename:Client *	file:
spawn	dwm.c	/^spawn(const Arg *arg)$/;"	f	typeref:typename:void
stack	dwm.c	/^	Client *stack;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
stext	dwm.c	/^static char stext[256];$/;"	v	typeref:typename:char[256]	file:
suspendcmd	config.h	/^static const char *suspendcmd[]  = { "\/home\/xzb\/scripts\/suspend.sh", NULL };$/;"	v	typeref:typename:const char * []
sw	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
symbol	dwm.c	/^	const char *symbol;$/;"	m	struct:__anon0f53a99e0908	typeref:typename:const char *	file:
tag	dwm.c	/^tag(const Arg *arg)$/;"	f	typeref:typename:void
tagmon	dwm.c	/^tagmon(const Arg *arg)$/;"	f	typeref:typename:void
tags	config.h	/^static const char *tags[] = { "一", "二", "三", "四", "五", "六", "七", "八", "九" };$/;"	v	typeref:typename:const char * []
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:Client	typeref:typename:unsigned int	file:
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:unsigned int	file:
tagset	dwm.c	/^	unsigned int tagset[2];$/;"	m	struct:Monitor	typeref:typename:unsigned int[2]	file:
termcmd	config.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v	typeref:typename:const char * []
tile	dwm.c	/^tile(Monitor *m)$/;"	f	typeref:typename:void
title	dwm.c	/^	const char *title;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
togglebar	dwm.c	/^togglebar(const Arg *arg)$/;"	f	typeref:typename:void
togglefloating	dwm.c	/^togglefloating(const Arg *arg)$/;"	f	typeref:typename:void
togglescratch	dwm.c	/^togglescratch(const Arg *arg)$/;"	f	typeref:typename:void
toggletag	dwm.c	/^toggletag(const Arg *arg)$/;"	f	typeref:typename:void
toggleview	dwm.c	/^toggleview(const Arg *arg)$/;"	f	typeref:typename:void
togglewin	dwm.c	/^togglewin(const Arg *arg)$/;"	f	typeref:typename:void
topbar	config.h	/^static const int topbar             = 0;        \/* 0 means bottom bar *\/$/;"	v	typeref:typename:const int
topbar	dwm.c	/^	int topbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
trayercmd	config.h	/^static const char *trayercmd[]  = { "\/home\/xzb\/scripts\/tr-toggle.sh", NULL };$/;"	v	typeref:typename:const char * []
ui	dwm.c	/^	unsigned int ui;$/;"	m	union:__anon0f53a99e060a	typeref:typename:unsigned int	file:
unfocus	dwm.c	/^unfocus(Client *c, int setfocus)$/;"	f	typeref:typename:void
uninstall	Makefile	/^uninstall:$/;"	t
unmanage	dwm.c	/^unmanage(Client *c, int destroyed)$/;"	f	typeref:typename:void
unmapnotify	dwm.c	/^unmapnotify(XEvent *e)$/;"	f	typeref:typename:void
updatebarpos	dwm.c	/^updatebarpos(Monitor *m)$/;"	f	typeref:typename:void
updatebars	dwm.c	/^updatebars(void)$/;"	f	typeref:typename:void
updateclientlist	dwm.c	/^updateclientlist()$/;"	f	typeref:typename:void
updategeom	dwm.c	/^updategeom(void)$/;"	f	typeref:typename:int
updatenumlockmask	dwm.c	/^updatenumlockmask(void)$/;"	f	typeref:typename:void
updatesizehints	dwm.c	/^updatesizehints(Client *c)$/;"	f	typeref:typename:void
updatestatus	dwm.c	/^updatestatus(void)$/;"	f	typeref:typename:void
updatetitle	dwm.c	/^updatetitle(Client *c)$/;"	f	typeref:typename:void
updatewindowtype	dwm.c	/^updatewindowtype(Client *c)$/;"	f	typeref:typename:void
updatewmhints	dwm.c	/^updatewmhints(Client *c)$/;"	f	typeref:typename:void
upvol	config.h	/^static const char *upvol[]   = { "\/home\/xzb\/scripts\/vol-up.sh",  NULL };$/;"	v	typeref:typename:const char * []
useargb	dwm.c	/^static int useargb = 0;$/;"	v	typeref:typename:int	file:
utf8decode	drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	typeref:typename:size_t	file:
utf8decodebyte	drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	typeref:typename:long	file:
utf8validate	drw.c	/^utf8validate(long *u, size_t i)$/;"	f	typeref:typename:size_t	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	typeref:typename:const long[]	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	typeref:typename:const long[]	file:
v	dwm.c	/^	const void *v;$/;"	m	union:__anon0f53a99e060a	typeref:typename:const void *	file:
view	dwm.c	/^view(const Arg *arg)$/;"	f	typeref:typename:void
viewontag	config.h	/^static const Bool viewontag         = True;     \/* Switch view on tag switch *\/$/;"	v	typeref:typename:const Bool
visual	drw.h	/^	Visual *visual;$/;"	m	struct:__anon0f5116480308	typeref:typename:Visual *
visual	dwm.c	/^static Visual *visual;$/;"	v	typeref:typename:Visual *	file:
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
wh	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Client	typeref:typename:Window	file:
wintoclient	dwm.c	/^wintoclient(Window w)$/;"	f	typeref:typename:Client *
wintomon	dwm.c	/^wintomon(Window w)$/;"	f	typeref:typename:Monitor *
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[]	file:
wmcheckwin	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
wpcmd	config.h	/^static const char *wpcmd[]  = { "\/home\/xzb\/scripts\/wp-change.sh", NULL };$/;"	v	typeref:typename:const char * []
ww	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wx	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wy	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
xerror	dwm.c	/^xerror(Display *dpy, XErrorEvent *ee)$/;"	f	typeref:typename:int
xerrordummy	dwm.c	/^xerrordummy(Display *dpy, XErrorEvent *ee)$/;"	f	typeref:typename:int
xerrorstart	dwm.c	/^xerrorstart(Display *dpy, XErrorEvent *ee)$/;"	f	typeref:typename:int
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	typeref:typename:int (*)(Display *,XErrorEvent *)	file:
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt	typeref:typename:XftFont *
xfont_create	drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	typeref:typename:Fnt *	file:
xfont_free	drw.c	/^xfont_free(Fnt *font)$/;"	f	typeref:typename:void	file:
xinitvisual	dwm.c	/^xinitvisual()$/;"	f	typeref:typename:void
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
zoom	dwm.c	/^zoom(const Arg *arg)$/;"	f	typeref:typename:void
